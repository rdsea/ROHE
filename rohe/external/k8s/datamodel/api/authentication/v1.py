# generated by datamodel-codegen:
#   filename:  api__v1_openapi.json
#   timestamp: 2024-06-27T14:30:27+00:00

from __future__ import annotations

from typing import Annotated, List, Optional

from pydantic import AwareDatetime, BaseModel, Field

from ...apimachinery.pkg.apis.meta import v1


class BoundObjectReference(BaseModel):
    api_version: Annotated[
        Optional[str],
        Field(None, alias="apiVersion", description="API version of the referent."),
    ]
    kind: Annotated[
        Optional[str],
        Field(
            None,
            description="Kind of the referent. Valid kinds are 'Pod' and 'Secret'.",
        ),
    ]
    name: Annotated[Optional[str], Field(None, description="Name of the referent.")]
    uid: Annotated[Optional[str], Field(None, description="UID of the referent.")]


class TokenRequestSpec(BaseModel):
    audiences: Annotated[
        List[str],
        Field(
            description="Audiences are the intendend audiences of the token. A recipient of a token must identify themself with an identifier in the list of audiences of the token, and otherwise should reject the token. A token issued for multiple audiences may be used to authenticate against any of the audiences listed but implies a high degree of trust between the target audiences."
        ),
    ]
    bound_object_ref: Annotated[
        Optional[BoundObjectReference],
        Field(
            None,
            alias="boundObjectRef",
            description="BoundObjectRef is a reference to an object that the token will be bound to. The token will only be valid for as long as the bound object exists. NOTE: The API server's TokenReview endpoint will validate the BoundObjectRef, but other audiences may not. Keep ExpirationSeconds small if you want prompt revocation.",
        ),
    ]
    expiration_seconds: Annotated[
        Optional[int],
        Field(
            None,
            alias="expirationSeconds",
            description="ExpirationSeconds is the requested duration of validity of the request. The token issuer may return a token with a different validity duration so a client needs to check the 'expiration' field in a response.",
        ),
    ]


class TokenRequestStatus(BaseModel):
    expiration_timestamp: Annotated[
        AwareDatetime,
        Field(
            alias="expirationTimestamp",
            description="ExpirationTimestamp is the time of expiration of the returned token.",
        ),
    ]
    token: Annotated[str, Field(description="Token is the opaque bearer token.")]


class TokenRequest(BaseModel):
    api_version: Annotated[
        Optional[str],
        Field(
            None,
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ]
    kind: Annotated[
        Optional[str],
        Field(
            None,
            description="Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
        ),
    ]
    metadata: Annotated[
        Optional[v1.ObjectMeta],
        Field(
            {},
            description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
        ),
    ]
    spec: Annotated[
        TokenRequestSpec,
        Field(description="Spec holds information about the request being evaluated"),
    ]
    status: Annotated[
        Optional[TokenRequestStatus],
        Field(
            {},
            description="Status is filled in by the server and indicates whether the token can be authenticated.",
        ),
    ]
