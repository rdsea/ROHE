# This example config does not specify resource requests or limits.
# For examples with more realistic resource configuration, see
# ray-cluster.complete.large.yaml and
# ray-cluster.autoscaler.large.yaml.
apiVersion: ray.io/v1alpha1
kind: RayCluster
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
    # An unique identifier for the head node and workers of this cluster.
  name: raycluster-getting-started
spec:
  rayVersion: '2.3.0' # should match the Ray version in the image of the containers
  # Ray head pod template
  headGroupSpec:
    serviceType: ClusterIP # optional
    # the following params are used to complete the ray start: ray start --head --block ...
    rayStartParams:
      dashboard-host: '0.0.0.0'
      num-cpus: '1' # can be auto-completed from the limits
      block: 'true'
    #pod template
    template:
      spec:
        containers:
        - name: ray-head
          image: rayproject/ray:2.3.0
          volumeMounts:
          - mountPath: /opt
            name: config
        volumes:
        # You set volumes at the Pod level, then mount them into containers inside that Pod
        - name: config
          configMap:
            # Provide the name of the ConfigMap you want to mount.
            name: ray-code-single
            # An array of keys from the ConfigMap to create as files
            items:
            - key: sample_code.py
              path: sample_code.py
######################Ray code sample#################################
# this is only an example code that is mounted into the container and executed to show the Ray cluster at work
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ray-code-single
data: 
  sample_code.py: |
    import ray
    from os import environ
    redis_pass = environ.get("REDIS_PASSWORD") 
    print("trying to connect to Ray!")
    ray.init(address="auto", _redis_password=redis_pass)
    print("now executing some code with Ray!")
    import time
    start = time.time()
    @ray.remote
    def f():
      time.sleep(0.01)
      return ray._private.services.get_node_ip_address()
    values=set(ray.get([f.remote() for _ in range(1000)]))
    print("Ray Nodes: ",str(values))
    file = open("/tmp/ray_nodes.txt","a")
    file.write("available nodes: %s\n" % str(values))
    file.close()
    end = time.time()
    print("Execution time = ",end - start)
